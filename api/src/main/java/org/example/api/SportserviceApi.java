/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.api;

import org.example.model.EventsModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-05T13:00:35.590383600+01:00[Europe/Warsaw]")
@Validated
@Api(value = "sportservice", description = "the sportservice API")
public interface SportserviceApi {

    /**
     * POST /sportservice/events : Add events to database
     *
     * @param eventsModel  (required)
     * @return created successfully (status code 201)
     *         or creation unsuccessful (status code 400)
     */
    @ApiOperation(value = "Add events to database", nickname = "addEvents", notes = "", tags={ "sport-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "created successfully"),
        @ApiResponse(code = 400, message = "creation unsuccessful") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sportservice/events",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> addEvents(@ApiParam(value = "", required = true) @Valid @RequestBody EventsModel eventsModel);


    /**
     * GET /sportservice/events : List events by given parameters
     *
     * @param q  (required)
     * @return result as text (status code 200)
     */
    @ApiOperation(value = "List events by given parameters", nickname = "getEvents", notes = "", response = String.class, tags={ "sport-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "result as text", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sportservice/events",
        produces = { "text/plain" }
    )
    ResponseEntity<String> getEvents(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "q", required = true) Integer q);


    /**
     * GET /sportservice/teams : List all team names
     *
     * @return result as text (status code 200)
     */
    @ApiOperation(value = "List all team names", nickname = "getTeams", notes = "", response = String.class, tags={ "sport-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "result as text", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sportservice/teams",
        produces = { "text/plain" }
    )
    ResponseEntity<String> getTeams();

}
